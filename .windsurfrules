# .windsurfrules: MCP Palo Alto Integration Server (Python SDK)

This file defines the coding and implementation rules for the MCP Palo Alto Integration Server project, ensuring consistency with the Product Requirements Document (PRD) and the specified **Python** technical stack using the **`modelcontextprotocol` Python SDK**.

---

## General Rules

- **Use Python >= 3.10**: Write all code in Python 3.10 or later, as required by the `modelcontextprotocol` SDK, ensuring strong typing via type hints.
- **Utilize the `modelcontextprotocol` Python SDK**: Structure the server primarily using the **`FastMCP`** class and its decorators (`@mcp.tool`) from the `mcp.server.fastmcp` module.
- **Rely on `FastMCP` for Output Formatting**: Allow `FastMCP` to automatically handle the conversion of tool return values (strings, lists, dicts, `mcp.server.fastmcp.Image`) into appropriate MCP content types (e.g., `TextContent`, `ImageContent`).
- **Use `async`/`await` for I/O**: Implement all network calls (e.g., Palo Alto API requests via `httpx`) and potentially long-running tool logic using `async`/`await`, leveraging the `anyio` library implicitly used by the SDK.
- **Leverage Pydantic for Parameter Validation**: Define tool arguments using Python type hints (and optionally `pydantic.Field` annotations). Rely on `FastMCP`'s built-in Pydantic integration for automatic validation of incoming tool arguments.

---

## Code Organization

- **Organize code into specified Python modules**:
  - Place the main `FastMCP` server instance and tool definitions in `src/palo_alto_mcp/server.py`.
  - Implement Palo Alto XML API integration logic in `src/palo_alto_mcp/pan_os_api.py`.
  - Define the command-line entry point in `src/palo_alto_mcp/__main__.py`.
  - Follow the PRDâ€™s directory structure (`src/palo_alto_mcp/`, `tests/`, `pyproject.toml`, etc.).
- **Use Python Type Hints**: Define strict type hints for function arguments, return values, and variables, especially for API interactions and tool signatures, to leverage Pydantic validation and static analysis (`pyright`/`mypy`).

---

## Server Configuration

- **Default to Standard I/O Transport**: Configure the server to use standard I/O transport by default via `mcp.run()`, ensuring compatibility with command-based client workflows (like Windsurf or `mcp install`).
- **Read Sensitive Data from Environment Variables**: Access Palo Alto API keys and configuration (e.g., `PANOS_HOSTNAME`, `PANOS_API_KEY`) via environment variables (`os.environ`), potentially managed using `pydantic-settings`. Avoid hardcoding credentials.
- **Use SDK Logging Utilities**: Implement structured logging using `mcp.server.fastmcp.utilities.logging` or standard Python `logging`, potentially leveraging the `Context` object within tools for request-specific logging.

---

## Tool Implementation

- **Implement Core Tools using `@mcp.tool`**: Define three functions decorated with `@mcp.tool` in `server.py`:
  - `retrieve_address_objects`: Fetch address objects via `pan_os_api.py`.
  - `retrieve_security_zones`: Fetch security zones via `pan_os_api.py`.
  - `retrieve_security_policies`: Fetch security policies via `pan_os_api.py`.
- **Derive Tool Schemas from Type Hints**: Rely on `FastMCP` to automatically generate JSON schemas for tool inputs based on the Python function signatures (type hints and defaults). Add descriptions via `pydantic.Field` if needed.
- **Use `httpx` for API Calls**: Make asynchronous HTTPS requests to the Palo Alto NGFW XML API using `httpx` within `pan_os_api.py`, ensuring proper error handling (connection, status codes).

---

## Python Package Rules

- **Follow Python Packaging Standards**:
  - Define the package, dependencies, and build system in `pyproject.toml`.
  - Ensure the package is installable via `uv pip install .` or `pip install .`.
  - Define an entry point via `__main__.py` that allows running via `python -m palo_alto_mcp`.
  - Use semantic versioning (e.g., `0.1.0` for MVP, `1.0.0` for full release), potentially managed via `uv-dynamic-versioning`.
- **Keep Dependencies Minimal**: Rely primarily on `mcp` and `httpx`. Use `pydantic-settings` only if needed for config management.
- **Provide Configuration via Environment Variables**: Design tools and the API client to primarily consume configuration (API host, key) from environment variables.

---

## Testing and Deployment

- **Test Locally with SDK Tools**: Use `mcp dev` for development and testing with the MCP Inspector.
- **Write Unit and Integration Tests**: Place tests in `tests/` using `pytest`.
  - Unit test `pan_os_api.py` logic, mocking `httpx`.
  - Integration test MCP interactions using the SDK's `create_connected_server_and_client_session`.
- **Optimize for `pip`/`uv` Installation**: Ensure the package builds correctly (`uv build`) and installs seamlessly in clean environments.

---

## Non-Functional Requirements

- **Performance**: Ensure tool requests process within 2 seconds (excluding API latency) and minimize server startup time for stdio execution.
- **Security**:
  - Securely handle API keys via environment variables.
  - Rely on SDK's Pydantic validation for tool inputs.
  - Ensure graceful shutdown is handled by the SDK/`anyio`.
- **Reliability**: Implement clear error handling within tool functions and the API client, returning meaningful errors via MCP.
- **Usability**: Maintain consistency with other MCP Python packages regarding installation (`pip`/`uv`) and configuration (environment variables).

---

## Documentation

- **Document in `README.md`**: Include:
  - Installation instructions (`uv pip install .` or `pip install .`).
  - Usage/Invocation examples (`python -m palo_alto_mcp` or via `mcp install`).
  - Required Environment Variables (`PANOS_HOSTNAME`, `PANOS_API_KEY`).
  - List of available tools and their purpose.

---

## Notes

- Ensure alignment with the `modelcontextprotocol` Python SDK examples and best practices.
- Use `uv` for development workflows (dependency management, linting, testing) as recommended by the SDK.
- Refer to the PRD for detailed functional and non-functional requirements.
